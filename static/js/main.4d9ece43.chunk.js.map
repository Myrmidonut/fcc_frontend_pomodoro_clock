{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Settings","react_default","a","createElement","id","className","this","props","breakLength","onClick","incrementBreak","decrementBreak","sessionLength","incrementSession","decrementSession","Component","Timer","timeLeft","phase","Controls","startStop","buttonText","reset","App","state","running","initialState","_this","e","concat","String","Math","floor","padStart","setState","playAudio","convertTime","_this2","interval","setInterval","clearInterval","document","getElementById","play","audio","pause","currentTime","_this3","App_Settings","App_Timer","App_Controls","preload","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d9ece43.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div>\n        <div id=\"break-container\">\n          <div id=\"break-label\" className=\"text\">Break:</div>\n          <div className=\"text\">\n            <span id=\"break-length\">{this.props.breakLength}</span>\n            <span> Minutes</span>\n          </div>\n          <div className=\"buttons-container\">\n            <button id=\"break-increment\" onClick={this.props.incrementBreak}>+</button>\n            <button id=\"break-decrement\" onClick={this.props.decrementBreak}>-</button>\n          </div>\n        </div>\n        \n        <div id=\"session-container\">\n          <div id=\"session-label\" className=\"text\">Session:</div>\n          <div className=\"text\">\n            <span id=\"session-length\">{this.props.sessionLength}</span>\n            <span> Minutes</span>\n          </div>\n          <div className=\"buttons-container\">\n            <button id=\"session-increment\" onClick={this.props.incrementSession}>+</button>\n            <button id=\"session-decrement\" onClick={this.props.decrementSession}>-</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div id=\"timer-container\">\n        <div className=\"text\">\n          <span id=\"time-left\">{this.props.timeLeft}</span>\n          <span> left in </span>\n          <span id=\"timer-label\">{this.props.phase}</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Controls extends Component {\n  render() {\n    return (\n      <div id=\"controls-container\">\n        <div className=\"buttons-container\">\n          <button id=\"start_stop\" onClick={this.props.startStop}>{this.props.buttonText}</button>\n          <button id=\"reset\" onClick={this.props.reset}>Reset</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends Component {\n  state = {\n    breakLength: 300,\n    sessionLength: 1500,\n    timeLeft: 1500,\n    phase: \"Session\",\n    running: false,\n    startStop: \"Start\"\n  }\n\n  initialState = this.state;\n\n  convertTime(e) {\n    return `${String(Math.floor(e/60)).padStart(2, \"0\")}:${String(e%60).padStart(2, \"0\")}`;\n  }\n\n  incrementBreak() {\n    let breakLength = this.state.breakLength;\n    \n    if (breakLength < 3541) {\n      breakLength += 60;\n      \n      this.setState({\n        breakLength: breakLength,\n      })\n    }\n  }\n\n  incrementSession() {\n    let sessionLength = this.state.sessionLength;\n    \n    if (sessionLength < 3541) {\n      sessionLength += 60;\n      \n      this.setState({\n        sessionLength: sessionLength,\n        timeLeft: sessionLength\n      })\n    }\n  }\n\n  decrementBreak() {\n    let breakLength = this.state.breakLength;\n    \n    if (breakLength > 60) {\n      breakLength -= 60;\n      \n      this.setState({\n        breakLength: breakLength\n      })\n    }\n  }\n\n  decrementSession() {\n    let sessionLength = this.state.sessionLength;\n    \n    if (sessionLength > 60) {\n      sessionLength -= 60;\n      \n      this.setState({\n        sessionLength: sessionLength,\n        timeLeft: sessionLength\n      })\n    }\n  }\n\n  timeLeft() {\n    if (this.state.timeLeft === -1) {\n      this.playAudio();\n      \n      if (this.state.phase === \"Session\") {\n        this.setState({\n          timeLeft: this.state.breakLength,\n          phase: \"Break\"\n        })\n      } else if (this.state.phase === \"Break\") {\n        this.setState({\n          timeLeft: this.state.sessionLength,\n          phase: \"Session\"\n        })\n      }\n    }\n    \n    return this.convertTime(this.state.timeLeft);\n  }\n\n  startStop() {\n    if (this.state.running === false) {\n      this.interval = setInterval(() => {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        });\n      }, 1000);\n      \n      this.setState({\n        running: true,\n        startStop: \"Stop\"\n      })\n    } else {\n      clearInterval(this.interval);\n      this.setState({\n        running: false,\n        startStop: \"Start\"\n      })\n    }\n  }\n\n  playAudio() {\n    const audio = document.getElementById(\"beep\");\n\n    //audio.load();\n    audio.play();\n  }\n  \n  reset() {\n    const audio = document.getElementById(\"beep\");\n    \n    clearInterval(this.interval);\n    audio.pause();\n    audio.currentTime = 0;\n    this.setState(this.initialState);\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <Settings\n          breakLength={this.state.breakLength/60} \n          sessionLength={this.state.sessionLength/60} \n          incrementSession={() => this.incrementSession()}\n          decrementSession={() => this.decrementSession()}\n          incrementBreak={() => this.incrementBreak()}\n          decrementBreak={() => this.decrementBreak()} />\n        <Timer\n          timeLeft={this.timeLeft()}\n          phase={this.state.phase} />\n        <Controls\n          startStop={() => this.startStop()}\n          reset={() => this.reset()}\n          buttonText={this.state.startStop} />\n        <audio \n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\">\n        </audio>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}