{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Settings","props","react_default","a","createElement","id","className","breakLength","onClick","incrementBreak","decrementBreak","sessionLength","incrementSession","decrementSession","Timer","timeLeft","phase","Controls","startStop","buttonText","reset","App","state","running","initialState","_this","e","concat","String","Math","floor","padStart","this","setState","playAudio","convertTime","_this2","interval","setInterval","clearInterval","document","getElementById","play","audio","pause","currentTime","_this3","App_Settings","App_Timer","App_Controls","preload","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b823f015.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst Settings = (props) => {\n  return (\n    <div>\n\n      <div id=\"break-container\">\n        <div id=\"break-label\" className=\"text\">Break:</div>\n        <div className=\"text\">\n          <span id=\"break-length\">{props.breakLength}</span>\n          <span> Minutes</span>\n        </div>\n        <div className=\"buttons-container\">\n          <button id=\"break-increment\" onClick={props.incrementBreak}>+</button>\n          <button id=\"break-decrement\" onClick={props.decrementBreak}>-</button>\n        </div>\n      </div>\n      \n      <div id=\"session-container\">\n        <div id=\"session-label\" className=\"text\">Session:</div>\n        <div className=\"text\">\n          <span id=\"session-length\">{props.sessionLength}</span>\n          <span> Minutes</span>\n        </div>\n        <div className=\"buttons-container\">\n          <button id=\"session-increment\" onClick={props.incrementSession}>+</button>\n          <button id=\"session-decrement\" onClick={props.decrementSession}>-</button>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nconst Timer = (props) => {\n  return (\n    <div id=\"timer-container\">\n      <div className=\"text\">\n        <span id=\"time-left\">{props.timeLeft}</span>\n        <span> left in </span>\n        <span id=\"timer-label\">{props.phase}</span>\n      </div>\n    </div>\n  )\n}\n\nconst Controls = (props) => {\n  return (\n    <div id=\"controls-container\">\n      <div className=\"buttons-container\">\n        <button id=\"start_stop\" onClick={props.startStop}>{props.buttonText}</button>\n        <button id=\"reset\" onClick={props.reset}>Reset</button>\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component {\n  state = {\n    breakLength: 300,\n    sessionLength: 1500,\n    timeLeft: 1500,\n    phase: \"Session\",\n    running: false,\n    startStop: \"Start\"\n  }\n\n  initialState = this.state;\n\n  convertTime(e) {\n    return `${String(Math.floor(e/60)).padStart(2, \"0\")}:${String(e%60).padStart(2, \"0\")}`;\n  }\n\n  incrementBreak() {\n    let breakLength = this.state.breakLength;\n    \n    if (breakLength < 3541) {\n      breakLength += 60;\n      \n      this.setState({\n        breakLength: breakLength,\n      })\n    }\n  }\n\n  incrementSession() {\n    let sessionLength = this.state.sessionLength;\n    \n    if (sessionLength < 3541) {\n      sessionLength += 60;\n      \n      this.setState({\n        sessionLength: sessionLength,\n        timeLeft: sessionLength\n      })\n    }\n  }\n\n  decrementBreak() {\n    let breakLength = this.state.breakLength;\n    \n    if (breakLength > 60) {\n      breakLength -= 60;\n      \n      this.setState({\n        breakLength: breakLength\n      })\n    }\n  }\n\n  decrementSession() {\n    let sessionLength = this.state.sessionLength;\n    \n    if (sessionLength > 60) {\n      sessionLength -= 60;\n      \n      this.setState({\n        sessionLength: sessionLength,\n        timeLeft: sessionLength\n      })\n    }\n  }\n\n  timeLeft() {\n    if (this.state.timeLeft === -1) {\n      this.playAudio();\n      \n      if (this.state.phase === \"Session\") {\n        this.setState({\n          timeLeft: this.state.breakLength,\n          phase: \"Break\"\n        })\n      } else if (this.state.phase === \"Break\") {\n        this.setState({\n          timeLeft: this.state.sessionLength,\n          phase: \"Session\"\n        })\n      }\n    }\n    \n    return this.convertTime(this.state.timeLeft);\n  }\n\n  startStop() {\n    if (this.state.running === false) {\n      this.interval = setInterval(() => {\n        this.setState({\n          timeLeft: this.state.timeLeft - 1\n        });\n      }, 1000);\n      \n      this.setState({\n        running: true,\n        startStop: \"Stop\"\n      })\n    } else {\n      clearInterval(this.interval);\n      this.setState({\n        running: false,\n        startStop: \"Start\"\n      })\n    }\n  }\n\n  playAudio() {\n    const audio = document.getElementById(\"beep\");\n\n    //audio.load();\n    audio.play();\n  }\n  \n  reset() {\n    const audio = document.getElementById(\"beep\");\n    \n    clearInterval(this.interval);\n    audio.pause();\n\n    audio.currentTime = 0;\n\n    this.setState(this.initialState);\n  }\n\n  render() {\n    return (\n      <div id=\"main\">\n        <Settings\n          breakLength={this.state.breakLength/60} \n          sessionLength={this.state.sessionLength/60} \n          incrementSession={() => this.incrementSession()}\n          decrementSession={() => this.decrementSession()}\n          incrementBreak={() => this.incrementBreak()}\n          decrementBreak={() => this.decrementBreak()} />\n        <Timer\n          timeLeft={this.timeLeft()}\n          phase={this.state.phase} />\n        <Controls\n          startStop={() => this.startStop()}\n          reset={() => this.reset()}\n          buttonText={this.state.startStop} />\n        <audio \n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://goo.gl/65cBl1\">\n        </audio>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}